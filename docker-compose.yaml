version: "3"
services:

  nginx:
    image: "nginx:demo"
    # image: "nginxplus"
    ports:
      - "80:80"
    depends_on:
      - hello-observability

  nginx-exporter:
    image: nginx/nginx-prometheus-exporter:0.11.0
    environment:
      - SCRAPE_URI=http://nginx/stub_status
    ports:
      - "9113:9113"
    depends_on:
      - nginx
  
  # The hello-observability application
  hello-observability:
    image: petclinic:demo
    # build:
    #   context: .
    #   dockerfile: ./petclinic/Dockerfile
    ports:
      - 8080:8080
    volumes:
      # Log files. They are all also accessible to the agent container,
      # through docker volume mount
      - ./logs/hello-observability.log:/tmp/hello-observability.log
      - ./logs/access_log.log:/tmp/access_log.log
    environment:
      # Tracing configuration
      # JAVA_TOOL_OPTIONS: -javaagent:./opentelemetry-javaagent.jar    
      OTEL_EXPORTER_OTLP_TRACES_ENDPOINT: http://tempo:4317
      OTEL_SERVICE_NAME: hello-observability
      OTEL_TRACES_EXPORTER: otlp
      OTEL_METRICS_EXPORTER: none
      # Trace ID 및 Span ID를 추가하여 로깅
      # LOGGING_PATTERN_CONSOLE: "%d{yyyy-MM-dd HH:mm:ss} [trace_id=%X{trace_id} span_id=%X{span_id}] - %logger{36} - %msg %n"
    depends_on:
      - mysql

  mysql:
    image: mysql:5.7
    ports:
      - "3306:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=
      - MYSQL_ALLOW_EMPTY_PASSWORD=true
      - MYSQL_USER=petclinic
      - MYSQL_PASSWORD=petclinic
      - MYSQL_DATABASE=petclinic
    volumes:
      - "./conf.d:/etc/mysql/conf.d:ro"

  # Our load generator
  load-generator:
    image: curlimages/curl:latest
    volumes:
      - ./petclinic/load-generator.sh:/tmp/load-generator.sh
    command: /bin/sh -c "/tmp/load-generator.sh"
  
  loki:
    image: grafana/loki:latest
    volumes:
      - ./config/loki-config.yaml:/etc/config/loki.yaml
    entrypoint:
      - /usr/bin/loki
      - -config.file=/etc/config/loki.yaml
    ports:
      - "3100:3100"
    
  tempo:
    image: grafana/tempo:1.5.0
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - ./config/tempo-local.yaml:/etc/tempo.yaml
      - ./config/tempo-data:/tmp/tempo
    ports:
      - "14268:14268"  # jaeger ingest
      - "3200:3200"   # tempo
      - "4317:4317"  # otlp grpc
      - "4318:4317"  # otlp http
      - "9411:4317"   # zipkin

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
    command: [
      "--config.file=/etc/prometheus.yaml", 
      "--enable-feature=exemplar-storage",
      "--storage.tsdb.path=/prometheus",
      "--web.console.libraries=/usr/share/prometheus/console_libraries",
      "--web.console.templates=/usr/share/prometheus/consoles",
      "--web.enable-remote-write-receiver",
      "--web.enable-lifecycle"
    ]

    volumes:
      - ./config/prometheus.yaml:/etc/prometheus.yaml
    ports:
      - "9090:9090"

  grafana:
    image: grafana/grafana:9.1.0
    volumes:
      # grafana.ini
      # see: https://grafana.com/docs/grafana/latest/setup-grafana/configure-docker/#default-paths
      - ./config/grafana.ini:/etc/grafana/grafana.ini
      # Pre-load the data sources
      - ./config/grafana-datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml
      # Pre-load the Hello Observability dashboard
      - ./dashboards:/etc/grafana/provisioning/dashboards
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
      - GF_USERS_DEFAULT_THEME=light
      - GF_FEATURE_TOGGLES_ENABLE=tempoSearch,tempoServiceGraph,tempoApmTable

    ports:
      - "3000:3000"
    
  agent:
    image: grafana/agent:latest
    volumes:
      # Agent configuration
      - ./config/agent.yaml:/etc/agent-config/agent.yaml
      # Log files
      - ./logs/hello-observability.log:/tmp/hello-observability.log
      - ./logs/access_log.log:/tmp/access_log.log
    entrypoint:
      - /bin/agent
      - -config.file=/etc/agent-config/agent.yaml
      - -metrics.wal-directory=/tmp/agent/wal
      - -enable-features=integrations-next
      - -config.expand-env
      - -config.enable-read-api
    environment:
      HOSTNAME: agent
#      REMOTE_WRITE_HOST: cortex:9009
      LOKI_HOST: loki:3100
      TEMPO_HOST: tempo:3200
    ports:
      - "12345:12345"
    depends_on:
      - loki
      - tempo